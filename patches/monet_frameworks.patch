From 6782a0aa4722c223ff3e4d6edcaffbcdeef56122 Mon Sep 17 00:00:00 2001
From: TheScarastic <warabhishek@gmail.com>
Date: Fri, 08 Oct 2021 07:45:40 +0000
Subject: [PATCH] monet: Add support for monet (cam16)

 * reversed from redfin beta 5

Change-Id: Ica9e11192927ef82e257380abdbf13f0e9807900
---

diff --git a/packages/SystemUI/Android.bp b/packages/SystemUI/Android.bp
index e86486d..e677b10 100644
--- a/packages/SystemUI/Android.bp
+++ b/packages/SystemUI/Android.bp
@@ -97,6 +97,7 @@
         "lottie",
         "org.lineageos.platform.internal",
         "vendor.lineage.powershare-V1.0-java",
+        "monet",
     ],
     manifest: "AndroidManifest.xml",
     additional_manifests: ["LineageManifest.xml"],
@@ -187,6 +188,7 @@
         "WindowManager-Shell",
         "org.lineageos.platform.internal",
         "vendor.lineage.powershare-V1.0-java",
+        "monet",
     ],
     libs: [
         "android.test.runner",
diff --git a/packages/SystemUI/monet/Android.bp b/packages/SystemUI/monet/Android.bp
new file mode 100644
index 0000000..4256376
--- /dev/null
+++ b/packages/SystemUI/monet/Android.bp
@@ -0,0 +1,12 @@
+java_library {
+    name: "monet",
+    platform_apis: true,
+    static_libs: [
+        "androidx.annotation_annotation",
+        "androidx.core_core",
+    ],
+    srcs: [
+        "src/**/*.java",
+        "src/**/*.kt",
+    ],
+}
diff --git a/packages/SystemUI/monet/AndroidManifest.xml b/packages/SystemUI/monet/AndroidManifest.xml
new file mode 100644
index 0000000..37f0050
--- /dev/null
+++ b/packages/SystemUI/monet/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.android.systemui.monet">
+</manifest>
diff --git a/packages/SystemUI/monet/src/com/android/systemui/monet/ColorScheme.kt b/packages/SystemUI/monet/src/com/android/systemui/monet/ColorScheme.kt
new file mode 100644
index 0000000..56a9c80
--- /dev/null
+++ b/packages/SystemUI/monet/src/com/android/systemui/monet/ColorScheme.kt
@@ -0,0 +1,168 @@
+package com.android.systemui.monet
+
+import android.app.WallpaperColors
+import android.graphics.Color
+import com.android.internal.graphics.ColorUtils
+import com.android.internal.graphics.cam.Cam
+import com.android.internal.graphics.cam.CamUtils
+import kotlin.math.absoluteValue
+import kotlin.math.roundToInt
+
+public class ColorScheme(i: Int, val darkTheme: Boolean) {
+    val accent1: List<Int>
+    val accent2: List<Int>
+    val accent3: List<Int>
+    val neutral1: List<Int>
+    val neutral2: List<Int>
+
+    init {
+        val fromInt = Cam.fromInt(if (i == 0) -14979341 else i)
+        val hue = fromInt.hue
+        accent1 = Shades.of(hue, fromInt.chroma.coerceAtLeast(48.0f)).toList()
+        accent2 = Shades.of(hue, 16.0f).toList()
+        accent3 = Shades.of(60.0f + hue, 32.0f).toList()
+        neutral1 = Shades.of(hue, 4.0f).toList()
+        neutral2 = Shades.of(hue, 8.0f).toList()
+    }
+
+    val accentColors1: List<Int>
+        get() {
+            return accent1
+        }
+
+    val allAccentColors: List<Int>
+        get() {
+            val arrayList = mutableListOf<Int>()
+            arrayList.addAll(accent1)
+            arrayList.addAll(accent2)
+            arrayList.addAll(accent3)
+            return arrayList
+        }
+
+    val allNeutralColors: List<Int>
+        get() {
+            val arrayList = mutableListOf<Int>()
+            arrayList.addAll(neutral1)
+            arrayList.addAll(neutral2)
+            return arrayList
+        }
+
+    override fun toString(): String {
+        return "ColorScheme {\n" +
+                "  neutral1: ${humanReadable(neutral1)}\n" +
+                "  neutral2: ${humanReadable(neutral2)}\n" +
+                "  accent1: ${humanReadable(accent1)}\n" +
+                "  accent2: ${humanReadable(accent2)}\n" +
+                "  accent3: ${humanReadable(accent3)}\n" +
+                "}"
+    }
+
+    companion object {
+        @JvmStatic
+        fun getSeedColor(wallpaperColors: WallpaperColors): Int {
+            return getSeedColors(wallpaperColors).first()
+        }
+
+        @JvmStatic
+        fun getSeedColors(wallpaperColors: WallpaperColors): List<Int> {
+            val intValue2 = wallpaperColors.allColors.values.reduce { a, b -> a + b }.toDouble()
+            val z2 = (intValue2 == 0.0)
+            if (z2) {
+                val list2 = wallpaperColors.mainColors.map {
+                    it.toArgb()
+                }.distinct().filter {
+                    Cam.fromInt(it).chroma >= 15.0f && CamUtils.lstarFromInt(it) >= 10.0f
+                }.toList()
+
+                if (list2.isEmpty()) {
+                    return listOf(-14979341)
+                }
+                return list2
+            }
+
+            val linkedHashMap = wallpaperColors.allColors.mapValues { it.value.toDouble() / intValue2 }
+
+            val linkedHashMap2 = wallpaperColors.allColors.mapValues { Cam.fromInt(it.key) }
+
+            val huePopulation = huePopulations(linkedHashMap2, linkedHashMap)
+
+            val linkedHashMap3 = wallpaperColors.allColors.mapValues {
+                val cam = linkedHashMap2[it.key]!!
+                val i = cam.hue.roundToInt()
+                val i2 = i - 15
+                val i3 = i + 15
+                var d = 0.0
+                for (a in i2..i3) {
+                    d += huePopulation[wrapDegrees(a)]
+                }
+                d
+            }
+
+            val linkedHashMap4 = linkedHashMap2.filter {
+                val key4 = it.key
+                val lstarFromInt = CamUtils.lstarFromInt(key4)
+                val d2 = linkedHashMap3[key4]!!
+                it.value.chroma >= 15.0f && lstarFromInt >= 10.0f && (z2 || d2 > 0.01)
+            }
+
+            val arrayList3 = mutableListOf<Int>()
+            val linkedHashMap5 = linkedHashMap4.mapValues {
+                score(it.value, linkedHashMap3[it.key]!!)
+            }
+
+            val list3 = linkedHashMap5.entries.toMutableList()
+            list3.sortByDescending { it.value }
+
+            for (entry6 in list3) {
+               val num2 = entry6.key
+               val z = arrayList3.find {
+                    val hue1 = linkedHashMap2[num2]!!.hue
+                    val hue2 = linkedHashMap2[it]!!.hue
+                    hueDiff(hue1, hue2) < 15 } != null
+                if (z) {
+                    continue
+                }
+                arrayList3.add(num2)
+            }
+
+            if (arrayList3.isEmpty()) {
+                arrayList3.add(-14979341)
+            }
+
+            return arrayList3;
+       }
+
+        private fun wrapDegrees(i: Int): Int {
+            if (i < 0) {
+                return (i % 360) + 360
+            }
+            return if (i >= 360) i % 360 else i
+        }
+
+        private fun hueDiff(f: Float, f2: Float): Float {
+            return 180f - ((f - f2).absoluteValue - 180f).absoluteValue
+        }
+
+        private fun humanReadable(list: List<Int>): String {
+            return list.joinToString { "#" + Integer.toHexString(it) }
+        }
+
+        private fun score(cam: Cam, d: Double): Double {
+            val f = cam.getChroma()
+            val d2 = if (f < 48.0) 0.1 else 0.3
+            val d3 = d * 70.0
+            return ((f - 48.0) * d2) + d3
+        }
+
+        private fun huePopulations(map: Map<Int, Cam>, map2: Map<Int, Double>): List<Double> {
+            val arrayList = List(size = 360, init = { 0.0 }).toMutableList()
+            for (entry in map2.entries) {
+                val d = map2[entry.key]!!
+                val cam = map[entry.key]!!
+                val i2 = cam.hue.roundToInt() % 360
+                arrayList[i2] = arrayList[i2] + d
+            }
+            return arrayList
+        }
+    }
+}
diff --git a/packages/SystemUI/monet/src/com/android/systemui/monet/Shades.java b/packages/SystemUI/monet/src/com/android/systemui/monet/Shades.java
new file mode 100644
index 0000000..5ab00a1
--- /dev/null
+++ b/packages/SystemUI/monet/src/com/android/systemui/monet/Shades.java
@@ -0,0 +1,19 @@
+package com.android.systemui.monet;
+
+import com.android.internal.annotations.VisibleForTesting;
+import com.android.internal.graphics.ColorUtils;
+
+@VisibleForTesting
+public class Shades {
+    public static int[] of(float f, float f2) {
+        int[] iArr = new int[12];
+        iArr[0] = ColorUtils.CAMToColor(f, f2, 99.0f);
+        iArr[1] = ColorUtils.CAMToColor(f, f2, 95.0f);
+        int i = 2;
+        while (i < 12) {
+            iArr[i] = ColorUtils.CAMToColor(f, f2, i == 6 ? 49.6f : (float) (100 - ((i - 1) * 10)));
+            i++;
+        }
+        return iArr;
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayController.java b/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayController.java
index 81999b5..1e35c9e 100644
--- a/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayController.java
+++ b/packages/SystemUI/src/com/android/systemui/theme/ThemeOverlayController.java
@@ -37,6 +37,7 @@
 import android.content.om.FabricatedOverlay;
 import android.content.om.OverlayIdentifier;
 import android.content.pm.UserInfo;
+import android.content.res.Configuration;
 import android.database.ContentObserver;
 import android.graphics.Color;
 import android.net.Uri;
@@ -47,9 +48,11 @@
 import android.text.TextUtils;
 import android.util.ArrayMap;
 import android.util.Log;
+import android.util.TypedValue;
 
 import androidx.annotation.NonNull;
 
+import com.android.internal.graphics.ColorUtils;
 import com.android.systemui.Dumpable;
 import com.android.systemui.SystemUI;
 import com.android.systemui.broadcast.BroadcastDispatcher;
@@ -58,6 +61,7 @@
 import com.android.systemui.dagger.qualifiers.Main;
 import com.android.systemui.dump.DumpManager;
 import com.android.systemui.keyguard.WakefulnessLifecycle;
+import com.android.systemui.monet.ColorScheme;
 import com.android.systemui.settings.UserTracker;
 import com.android.systemui.statusbar.FeatureFlags;
 import com.android.systemui.statusbar.policy.DeviceProvisionedController;
@@ -71,6 +75,7 @@
 import java.io.PrintWriter;
 import java.util.Collection;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Executor;
@@ -403,25 +408,56 @@
      * Return the main theme color from a given {@link WallpaperColors} instance.
      */
     protected int getNeutralColor(@NonNull WallpaperColors wallpaperColors) {
-        return wallpaperColors.getPrimaryColor().toArgb();
+        return ColorScheme.getSeedColor(wallpaperColors);
     }
 
     protected int getAccentColor(@NonNull WallpaperColors wallpaperColors) {
-        Color accentCandidate = wallpaperColors.getSecondaryColor();
-        if (accentCandidate == null) {
-            accentCandidate = wallpaperColors.getTertiaryColor();
-        }
-        if (accentCandidate == null) {
-            accentCandidate = wallpaperColors.getPrimaryColor();
-        }
-        return accentCandidate.toArgb();
+        return ColorScheme.getSeedColor(wallpaperColors);
+    }
+
+    private final boolean inDarkMode() {
+        return (mContext.getResources().getConfiguration().uiMode
+                & Configuration.UI_MODE_NIGHT_MASK) == Configuration.UI_MODE_NIGHT_YES;
     }
 
     /**
      * Given a color candidate, return an overlay definition.
      */
     protected @Nullable FabricatedOverlay getOverlay(int color, int type) {
-        return null;
+        ColorScheme colorScheme = new ColorScheme(color, inDarkMode());
+        List<Integer> colors;
+        String name;
+
+        if (type == ACCENT) {
+            colors = colorScheme.getAllAccentColors();
+            name = "accent";
+        } else {
+            colors = colorScheme.getAllNeutralColors();
+            name = "neutral";
+        }
+
+        int size = colorScheme.getAccent1().size();
+        FabricatedOverlay.Builder builder =
+                new FabricatedOverlay.Builder(mContext.getPackageName(), name, "android");
+
+        for (int i = 0; i < colors.size(); i++) {
+            int lightness = i % size;
+            int shade = i / size + 1;
+
+            String targetResource = "android:color/system_";
+            if (lightness == 0) {
+                targetResource += name + shade + "_10";
+            } else if (lightness == 1) {
+                targetResource += name + shade + "_50";
+            } else {
+                targetResource += name + shade + "_" + (lightness - 1) + "00";
+            }
+
+            builder.setResourceValue(targetResource, TypedValue.TYPE_INT_COLOR_ARGB8,
+                    ColorUtils.setAlphaComponent(colors.get(i).intValue(), 0xFF));
+        }
+
+        return builder.build();
     }
 
     private void updateThemeOverlays() {
