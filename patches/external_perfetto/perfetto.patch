From 8efd17c9a49a9b83bb2a4cbfe3ada00db4b203d2 Mon Sep 17 00:00:00 2001
From: Wang Han <416810799@qq.com>
Date: Sat, 26 Sep 2020 22:57:04 +0800
Subject: [PATCH] perfetto: Conditionally remove version check for memfd_create()

 * Every kernel should backport this, but we make sure the
   fallback work if some device does not backport it.

Change-Id: I26af49e3f2bd8846fcc6fc6af0d43ccad21ae223
---

diff --git a/Android.bp b/Android.bp
index 722ba58..01e2277 100644
--- a/Android.bp
+++ b/Android.bp
@@ -1238,6 +1238,9 @@
 // GN: //gn:default_deps
 cc_defaults {
   name: "perfetto_defaults",
+  defaults: [
+    "has_memfd_backport_defaults",
+  ],
   cflags: [
     "-O2",
     "-Wno-error=return-type",
diff --git a/src/tracing/ipc/memfd.cc b/src/tracing/ipc/memfd.cc
index 64025bf..7391b63 100644
--- a/src/tracing/ipc/memfd.cc
+++ b/src/tracing/ipc/memfd.cc
@@ -27,7 +27,9 @@
 #include <stdio.h>
 #include <string.h>
 #include <sys/syscall.h>
+#if !defined(HAS_MEMFD_BACKPORT)
 #include <sys/utsname.h>
+#endif
 #include <unistd.h>
 
 // Some android build bots use a sysroot that doesn't support memfd when
@@ -49,6 +51,7 @@
 namespace perfetto {
 bool HasMemfdSupport() {
   static bool kSupportsMemfd = [] {
+#if !defined(HAS_MEMFD_BACKPORT)
     // Check kernel version supports memfd_create(). Some older kernels segfault
     // executing memfd_create() rather than returning ENOSYS (b/116769556).
     static constexpr int kRequiredMajor = 3;
@@ -61,6 +64,7 @@
           (major == kRequiredMajor && minor < kRequiredMinor)))) {
       return false;
     }
+#endif
 
     base::ScopedFile fd;
     fd.reset(static_cast<int>(syscall(__NR_memfd_create, "perfetto_shmem",
diff --git a/src/tracing/ipc/posix_shared_memory.cc b/src/tracing/ipc/posix_shared_memory.cc
index 5fc7982..2f52dd7 100644
--- a/src/tracing/ipc/posix_shared_memory.cc
+++ b/src/tracing/ipc/posix_shared_memory.cc
@@ -44,10 +44,7 @@
       CreateMemfd("perfetto_shmem", MFD_CLOEXEC | MFD_ALLOW_SEALING);
   bool is_memfd = !!fd;
 
-  // In-tree builds only allow mem_fd, so we can inspect the seals to verify the
-  // fd is appropriately sealed. We'll crash in the PERFETTO_CHECK(fd) below if
-  // memfd_create failed.
-#if !PERFETTO_BUILDFLAG(PERFETTO_ANDROID_BUILD)
+#if !defined(HAS_MEMFD_BACKPORT)
   if (!fd) {
     // TODO: if this fails on Android we should fall back on ashmem.
     PERFETTO_DPLOG("memfd_create() failed");
@@ -72,6 +69,7 @@
 std::unique_ptr<PosixSharedMemory> PosixSharedMemory::AttachToFd(
     base::ScopedFile fd,
     bool require_seals_if_supported) {
+#if defined(HAS_MEMFD_BACKPORT)
   bool requires_seals = require_seals_if_supported;
 
 #if PERFETTO_BUILDFLAG(PERFETTO_ANDROID_BUILD)
@@ -84,6 +82,9 @@
 #endif
 
   if (requires_seals) {
+#else
+  if (require_seals_if_supported && HasMemfdSupport()) {
+#endif
     // If the system supports memfd, we require a sealed memfd.
     int res = fcntl(*fd, F_GET_SEALS);
     if (res == -1 || (res & kFileSeals) != kFileSeals) {
